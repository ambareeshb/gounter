// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "gounter/internal/model"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateCounter provides a mock function with given fields: ctx, name
func (_m *Service) CreateCounter(ctx context.Context, name string) (*model.Counter, error) {
	ret := _m.Called(ctx, name)

	var r0 *model.Counter
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Counter); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Counter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementCounter provides a mock function with given fields: ctx, id
func (_m *Service) IncrementCounter(ctx context.Context, id uuid.UUID) (*model.Counter, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Counter
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Counter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Counter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteCounter provides a mock function with given fields: ctx, id
func (_m *Service) SoftDeleteCounter(ctx context.Context, id uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
